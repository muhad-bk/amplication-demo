/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { CreateUserAuthenticationStrategyArgs } from "./CreateUserAuthenticationStrategyArgs";
import { UpdateUserAuthenticationStrategyArgs } from "./UpdateUserAuthenticationStrategyArgs";
import { DeleteUserAuthenticationStrategyArgs } from "./DeleteUserAuthenticationStrategyArgs";
import { UserAuthenticationStrategyFindManyArgs } from "./UserAuthenticationStrategyFindManyArgs";
import { UserAuthenticationStrategyFindUniqueArgs } from "./UserAuthenticationStrategyFindUniqueArgs";
import { UserAuthenticationStrategy } from "./UserAuthenticationStrategy";
import { AuthenticationStrategy } from "../../authenticationStrategy/base/AuthenticationStrategy";
import { User } from "../../user/base/User";
import { UserAuthenticationStrategyService } from "../userAuthenticationStrategy.service";

@graphql.Resolver(() => UserAuthenticationStrategy)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UserAuthenticationStrategyResolverBase {
  constructor(
    protected readonly service: UserAuthenticationStrategyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserAuthenticationStrategy",
    action: "read",
    possession: "any",
  })
  async _userAuthenticationStrategiesMeta(
    @graphql.Args() args: UserAuthenticationStrategyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserAuthenticationStrategy])
  @nestAccessControl.UseRoles({
    resource: "UserAuthenticationStrategy",
    action: "read",
    possession: "any",
  })
  async userAuthenticationStrategies(
    @graphql.Args() args: UserAuthenticationStrategyFindManyArgs
  ): Promise<UserAuthenticationStrategy[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserAuthenticationStrategy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserAuthenticationStrategy",
    action: "read",
    possession: "own",
  })
  async userAuthenticationStrategy(
    @graphql.Args() args: UserAuthenticationStrategyFindUniqueArgs
  ): Promise<UserAuthenticationStrategy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserAuthenticationStrategy)
  @nestAccessControl.UseRoles({
    resource: "UserAuthenticationStrategy",
    action: "create",
    possession: "any",
  })
  async createUserAuthenticationStrategy(
    @graphql.Args() args: CreateUserAuthenticationStrategyArgs
  ): Promise<UserAuthenticationStrategy> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        authenticationStrategy: args.data.authenticationStrategy
          ? {
              connect: args.data.authenticationStrategy,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserAuthenticationStrategy)
  @nestAccessControl.UseRoles({
    resource: "UserAuthenticationStrategy",
    action: "update",
    possession: "any",
  })
  async updateUserAuthenticationStrategy(
    @graphql.Args() args: UpdateUserAuthenticationStrategyArgs
  ): Promise<UserAuthenticationStrategy | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          authenticationStrategy: args.data.authenticationStrategy
            ? {
                connect: args.data.authenticationStrategy,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserAuthenticationStrategy)
  @nestAccessControl.UseRoles({
    resource: "UserAuthenticationStrategy",
    action: "delete",
    possession: "any",
  })
  async deleteUserAuthenticationStrategy(
    @graphql.Args() args: DeleteUserAuthenticationStrategyArgs
  ): Promise<UserAuthenticationStrategy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AuthenticationStrategy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AuthenticationStrategy",
    action: "read",
    possession: "any",
  })
  async authenticationStrategy(
    @graphql.Parent() parent: UserAuthenticationStrategy
  ): Promise<AuthenticationStrategy | null> {
    const result = await this.service.getAuthenticationStrategy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.ResolveField(() => User, { nullable: true })
  async user(
    @graphql.Parent() parent: UserAuthenticationStrategy
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
