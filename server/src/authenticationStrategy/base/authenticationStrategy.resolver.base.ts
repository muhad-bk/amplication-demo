/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAuthenticationStrategyArgs } from "./CreateAuthenticationStrategyArgs";
import { UpdateAuthenticationStrategyArgs } from "./UpdateAuthenticationStrategyArgs";
import { DeleteAuthenticationStrategyArgs } from "./DeleteAuthenticationStrategyArgs";
import { AuthenticationStrategyFindManyArgs } from "./AuthenticationStrategyFindManyArgs";
import { AuthenticationStrategyFindUniqueArgs } from "./AuthenticationStrategyFindUniqueArgs";
import { AuthenticationStrategy } from "./AuthenticationStrategy";
import { UserAuthenticationStrategyFindManyArgs } from "../../userAuthenticationStrategy/base/UserAuthenticationStrategyFindManyArgs";
import { UserAuthenticationStrategy } from "../../userAuthenticationStrategy/base/UserAuthenticationStrategy";
import { AuthenticationStrategyService } from "../authenticationStrategy.service";

@graphql.Resolver(() => AuthenticationStrategy)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AuthenticationStrategyResolverBase {
  constructor(
    protected readonly service: AuthenticationStrategyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationStrategy",
    action: "read",
    possession: "any",
  })
  async _authenticationStrategiesMeta(
    @graphql.Args() args: AuthenticationStrategyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AuthenticationStrategy])
  @nestAccessControl.UseRoles({
    resource: "AuthenticationStrategy",
    action: "read",
    possession: "any",
  })
  async authenticationStrategies(
    @graphql.Args() args: AuthenticationStrategyFindManyArgs
  ): Promise<AuthenticationStrategy[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AuthenticationStrategy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AuthenticationStrategy",
    action: "read",
    possession: "own",
  })
  async authenticationStrategy(
    @graphql.Args() args: AuthenticationStrategyFindUniqueArgs
  ): Promise<AuthenticationStrategy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AuthenticationStrategy)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationStrategy",
    action: "create",
    possession: "any",
  })
  async createAuthenticationStrategy(
    @graphql.Args() args: CreateAuthenticationStrategyArgs
  ): Promise<AuthenticationStrategy> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AuthenticationStrategy)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationStrategy",
    action: "update",
    possession: "any",
  })
  async updateAuthenticationStrategy(
    @graphql.Args() args: UpdateAuthenticationStrategyArgs
  ): Promise<AuthenticationStrategy | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AuthenticationStrategy)
  @nestAccessControl.UseRoles({
    resource: "AuthenticationStrategy",
    action: "delete",
    possession: "any",
  })
  async deleteAuthenticationStrategy(
    @graphql.Args() args: DeleteAuthenticationStrategyArgs
  ): Promise<AuthenticationStrategy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserAuthenticationStrategy])
  @nestAccessControl.UseRoles({
    resource: "UserAuthenticationStrategy",
    action: "read",
    possession: "any",
  })
  async userAuthenticationStrategies(
    @graphql.Parent() parent: AuthenticationStrategy,
    @graphql.Args() args: UserAuthenticationStrategyFindManyArgs
  ): Promise<UserAuthenticationStrategy[]> {
    const results = await this.service.findUserAuthenticationStrategies(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
